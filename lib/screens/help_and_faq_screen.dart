import 'package:flutter/material.dart';
import 'package:url_launcher/url_launcher.dart';
import '../theme/app_theme.dart';

class HelpAndFAQScreen extends StatefulWidget {
  const HelpAndFAQScreen({Key? key}) : super(key: key);

  @override
  State<HelpAndFAQScreen> createState() => _HelpAndFAQScreenState();
}

class _HelpAndFAQScreenState extends State<HelpAndFAQScreen>
    with TickerProviderStateMixin {
  late AnimationController _animationController;
  late Animation<double> _fadeAnimation;
  late Animation<double> _slideAnimation;

  final TextEditingController _searchController = TextEditingController();
  String _searchQuery = '';
  int? _expandedIndex;

  final List<FAQCategory> _faqCategories = [
    FAQCategory(
      title: 'AI ve √ñƒürenme',
      icon: Icons.psychology,
      color: const Color(0xFF6366F1),
      emoji: 'üß†',
      faqs: [
        FAQ(
          question: 'AI planƒ±mƒ± neden deƒüi≈ütirdi?',
          answer:
              'AI asistanƒ±n, performansƒ±nƒ± ve √∂ƒürenme alƒ±≈ükanlƒ±klarƒ±nƒ± analiz ederek daha verimli bir √ßalƒ±≈üma planƒ± √∂nerir. Bu deƒüi≈üiklikler:\n\n‚Ä¢ Zayƒ±f olduƒüun konulara daha fazla zaman ayƒ±rƒ±r\n‚Ä¢ G√º√ßl√º olduƒüun alanlarƒ± peki≈ütirme dozunda tutar\n‚Ä¢ Biorhythmini dikkate alarak en verimli saatleri kullanƒ±r\n‚Ä¢ Hedeflerine g√∂re √∂ncelikleri ayarlar\n\nƒ∞stersen eski planƒ±na geri d√∂nebilir veya AI √∂nerilerini √∂zelle≈ütirebilirsin.',
        ),
        FAQ(
          question: 'Socratic sorgulama nasƒ±l √ßalƒ±≈üƒ±r?',
          answer:
              'AI Sokrates, seni d√º≈ü√ºnd√ºrerek √∂ƒürenmeni saƒülayan bir tekniktir:\n\n‚Ä¢ Doƒürudan cevap vermek yerine, doƒüru cevaba ula≈üman i√ßin sorular sorar\n‚Ä¢ √ñnyargƒ±larƒ±nƒ± sorgular ve farklƒ± bakƒ±≈ü a√ßƒ±larƒ± sunar\n‚Ä¢ Kavramlar arasƒ±nda baƒülantƒ± kurmanƒ± saƒülar\n‚Ä¢ Derinlemesine anlayƒ±≈ü geli≈ütirmeni destekler\n\nBu y√∂ntemle √∂ƒürendiklerin kalƒ±cƒ± hale gelir ve analitik d√º≈ü√ºnme becerilerin geli≈üir.',
        ),
        FAQ(
          question: 'AI asistan neden bazen yava≈ü yanƒ±t veriyor?',
          answer:
              'AI asistanƒ±n yanƒ±t s√ºresi ≈üu fakt√∂rlere baƒülƒ±dƒ±r:\n\n‚Ä¢ Sorunun karma≈üƒ±klƒ±k seviyesi\n‚Ä¢ Ki≈üiselle≈ütirme i√ßin gereken analiz s√ºresi\n‚Ä¢ ƒ∞nternet baƒülantƒ± hƒ±zƒ±n\n‚Ä¢ Sunucu yoƒüunluƒüu\n\nGenellikle basit sorular 2-3 saniye, karma≈üƒ±k analizler 5-10 saniye s√ºrer. Yava≈ülƒ±k devam ederse l√ºtfen teknik desteƒüe bildir.',
        ),
        FAQ(
          question: '√ñzel konu planlamasƒ± nasƒ±l yapƒ±lƒ±r?',
          answer:
              'Belirli bir konuya odaklanmak i√ßin:\n\n1. Ana men√ºden "Akƒ±llƒ± Planlama"ya git\n2. "√ñzel Konu" se√ßeneƒüini se√ß\n3. √áalƒ±≈ümak istediƒüin konuyu ve s√ºreyi belirt\n4. AI sana o konu i√ßin detaylƒ± plan olu≈ütursun\n\nPlan, zorluk seviyeni ve √∂nceki performansƒ±nƒ± dikkate alarak hazƒ±rlanƒ±r.',
        ),
      ],
    ),
    FAQCategory(
      title: 'XP ve Gamification',
      icon: Icons.emoji_events,
      color: const Color(0xFFF59E0B),
      emoji: 'üèÜ',
      faqs: [
        FAQ(
          question: 'XP nasƒ±l kazanƒ±lƒ±r?',
          answer:
              'XP (Experience Points) ≈üu aktivitelerle kazanƒ±lƒ±r:\n\n‚Ä¢ G√ºnl√ºk √ßalƒ±≈üma hedefini tamamlama: +50 XP\n‚Ä¢ Pomodoro seansƒ± bitirme: +10 XP\n‚Ä¢ AI sorularƒ± doƒüru yanƒ±tlama: +5-15 XP\n‚Ä¢ Haftalƒ±k hedefi tamamlama: +100 XP\n‚Ä¢ Streak s√ºrd√ºrme: Her g√ºn +5 ek XP\n‚Ä¢ √ñzel g√∂revleri tamamlama: +25-50 XP\n\nXP seviyesi arttƒ±k√ßa yeni rozetler ve √∂zellikler a√ßƒ±lƒ±r!',
        ),
        FAQ(
          question: 'Seri (Streak) nedir ve nasƒ±l s√ºrd√ºr√ºl√ºr?',
          answer:
              'Streak, art arda √ßalƒ±≈üma yaptƒ±ƒüƒ±n g√ºn sayƒ±sƒ±dƒ±r:\n\n‚Ä¢ Her g√ºn en az 15 dakika √ßalƒ±≈üarak streak s√ºrd√ºr√ºl√ºr\n‚Ä¢ Streak kƒ±rƒ±lƒ±rsa sƒ±fƒ±rdan ba≈ülar\n‚Ä¢ Haftalƒ±k streak freeze hakkƒ±n var (1 g√ºn atlamana izin verir)\n‚Ä¢ Streak seviyeleri: üî•7, üí™30, üèÜ100, üëë365 g√ºn\n\nY√ºksek streak seviyeleri bonus XP ve √∂zel √∂d√ºller verir.',
        ),
        FAQ(
          question: 'Rozet ve ba≈üarƒ±mlar nerede g√∂r√ºn√ºr?',
          answer:
              'T√ºm ba≈üarƒ±mlarƒ±n "Profil" b√∂l√ºm√ºnde g√∂r√ºnt√ºlenir:\n\n‚Ä¢ Kazandƒ±ƒüƒ±n rozetler ve seviyeleri\n‚Ä¢ ƒ∞lerleme durumun ve bir sonraki hedef\n‚Ä¢ Arkada≈ülarƒ±nla kar≈üƒ±la≈ütƒ±rma\n‚Ä¢ √ñzel √∂d√ºller ve unvanlar\n\nRozetler sosyal medyada payla≈üƒ±labilir ve motivasyonunu artƒ±rƒ±r.',
        ),
        FAQ(
          question: 'Liderlik tablosu nasƒ±l √ßalƒ±≈üƒ±r?',
          answer:
              'Haftalƒ±k liderlik tablosu:\n\n‚Ä¢ Aynƒ± seviyedeki kullanƒ±cƒ±larla yarƒ±≈üƒ±rsƒ±n\n‚Ä¢ XP, streak ve √ßalƒ±≈üma s√ºresi dikkate alƒ±nƒ±r\n‚Ä¢ ƒ∞lk 3\'e girersen √∂zel √∂d√ºller kazanƒ±rsƒ±n\n‚Ä¢ Her pazartesi yeni hafta ba≈ülar\n‚Ä¢ Arkada≈ülarƒ±nƒ± davet ederek √∂zel lig olu≈üturabilirsin',
        ),
      ],
    ),
    FAQCategory(
      title: 'Abonelik ve √ñdemeler',
      icon: Icons.workspace_premium,
      color: AppTheme.primaryColor,
      emoji: 'üíé',
      faqs: [
        FAQ(
          question: 'Premium √∂zellikleri nelerdir?',
          answer:
              'AI Pro √ºyeliƒüi ile ≈üu √∂zelliklere eri≈üirsin:\n\n‚Ä¢ Sƒ±nƒ±rsƒ±z AI asistan kullanƒ±mƒ±\n‚Ä¢ Geli≈ümi≈ü performans analizi ve raporlar\n‚Ä¢ Ki≈üiselle≈ütirilmi≈ü √ßalƒ±≈üma planlarƒ±\n‚Ä¢ T√ºm akƒ±llƒ± ara√ßlara eri≈üim\n‚Ä¢ √ñncelikli m√º≈üteri desteƒüi\n‚Ä¢ √áoklu cihaz senkronizasyonu\n‚Ä¢ Reklamsƒ±z deneyim\n‚Ä¢ √ñzel motivasyon i√ßerikleri',
        ),
        FAQ(
          question: 'Aboneliƒüimi nasƒ±l iptal edebilirim?',
          answer:
              'Abonelik iptali i√ßin:\n\n**iOS i√ßin:**\n1. Ayarlar > Apple ID > Abonelikler\n2. Okuz AI\'ƒ± bul ve iptal et\n\n**Android i√ßin:**\n1. Google Play Store > Hesap > Abonelikler\n2. Okuz AI\'ƒ± bul ve iptal et\n\n**Uygulama i√ßinden:**\nProfil > Aboneliƒüi Y√∂net > ƒ∞ptal Et\n\nƒ∞ptal ettikten sonra mevcut d√∂nem sonuna kadar premium √∂zelliklerini kullanmaya devam edersin.',
        ),
        FAQ(
          question: '√úcret iadesi alabilir miyim?',
          answer:
              'ƒ∞ade politikamƒ±z:\n\n‚Ä¢ ƒ∞lk 7 g√ºn i√ßinde ko≈üulsuz iade\n‚Ä¢ Teknik sorunlar i√ßin 30 g√ºn iade garantisi\n‚Ä¢ Kullanmadƒ±ƒüƒ±n s√ºre i√ßin orantƒ±lƒ± iade\n\n**ƒ∞ade ba≈üvurusu:**\n1. Ayarlar > Yardƒ±m > Bize Ula≈üƒ±n\n2. "ƒ∞ade Talebi" konusunu se√ß\n3. Gerek√ßeni a√ßƒ±kla\n\nGenellikle 2-3 i≈ü g√ºn√º i√ßinde i≈üleme alƒ±nƒ±r.',
        ),
        FAQ(
          question: 'Aile planƒ± var mƒ±?',
          answer:
              'Evet! Aile planƒ±mƒ±zla %40\'a varan tasarruf saƒülayabilirsin:\n\n‚Ä¢ 6 ki≈üiye kadar kullanƒ±m\n‚Ä¢ Her √ºyenin kendi profili ve verileri\n‚Ä¢ Ailevi ilerleme takibi\n‚Ä¢ Ebeveyn kontrol √∂zellikleri\n‚Ä¢ Tek faturalama\n\nAile planƒ± i√ßin Profil > Abonelik > Aile Planƒ± b√∂l√ºm√ºnden ba≈üvurabilirsin.',
        ),
      ],
    ),
    FAQCategory(
      title: 'Hesap Y√∂netimi',
      icon: Icons.account_circle,
      color: const Color(0xFF10B981),
      emoji: 'üë§',
      faqs: [
        FAQ(
          question: '≈ûifremi unuttum, nasƒ±l sƒ±fƒ±rlarƒ±m?',
          answer:
              '≈ûifre sƒ±fƒ±rlama adƒ±mlarƒ±:\n\n1. Giri≈ü ekranƒ±nda "≈ûifremi Unuttum" baƒülantƒ±sƒ±na tƒ±kla\n2. E-posta adresini gir\n3. Gelen e-postadaki baƒülantƒ±ya tƒ±kla\n4. Yeni ≈üifreni olu≈ütur\n\nE-posta gelmezse spam klas√∂r√ºn√º kontrol et. Sorun devam ederse destek ekibimizle ileti≈üime ge√ß.',
        ),
        FAQ(
          question: 'E-posta adresimi nasƒ±l deƒüi≈ütirebilirim?',
          answer:
              'E-posta deƒüi≈üikliƒüi i√ßin:\n\n1. Profil > Ayarlar > Hesap Bilgileri\n2. "E-posta Deƒüi≈ütir" butonuna tƒ±kla\n3. Mevcut ≈üifreni doƒürula\n4. Yeni e-posta adresini gir\n5. Doƒürulama kodunu kontrol et\n\nG√ºvenlik nedeniyle deƒüi≈üiklik 24 saat sonra aktif olur.',
        ),
        FAQ(
          question: 'Hesabƒ±mƒ± tamamen silebilir miyim?',
          answer:
              'Hesap silme i≈ülemi kalƒ±cƒ±dƒ±r ve geri alƒ±namaz:\n\n**Silinecek veriler:**\n‚Ä¢ Ki≈üisel bilgilerin\n‚Ä¢ √áalƒ±≈üma ge√ßmi≈üin\n‚Ä¢ ƒ∞lerleme kaydƒ±n\n‚Ä¢ Abonelik bilgilerin\n\n**ƒ∞≈ülem adƒ±mlarƒ±:**\n1. Profil > Ayarlar > Hesap ƒ∞≈ülemleri\n2. "Hesabƒ± Sil" butonuna tƒ±kla\n3. Gerek√ßeni belirt (isteƒüe baƒülƒ±)\n4. Son onayƒ± ver\n\nSilme i≈ülemi 30 g√ºn sonra tamamlanƒ±r. Bu s√ºre i√ßinde geri alabilirsin.',
        ),
        FAQ(
          question: '√áoklu cihaz kullanƒ±mƒ± nasƒ±l √ßalƒ±≈üƒ±r?',
          answer:
              'Premium √ºyelikle t√ºm cihazlarƒ±nda senkronizasyon:\n\n‚Ä¢ Telefon, tablet, bilgisayar aynƒ± hesap\n‚Ä¢ Otomatik yedekleme ve senkronizasyon\n‚Ä¢ Kaldƒ±ƒüƒ±n yerden devam etme\n‚Ä¢ √áevrimdƒ±≈üƒ± √ßalƒ±≈üma sonrasƒ± otomatik g√ºncelleme\n\nYeni cihaza giri≈ü yaptƒ±ƒüƒ±nda t√ºm verilerini bulacaksƒ±n.',
        ),
      ],
    ),
    FAQCategory(
      title: 'Teknik Sorunlar',
      icon: Icons.bug_report,
      color: const Color(0xFFEF4444),
      emoji: 'üîß',
      faqs: [
        FAQ(
          question: 'Uygulama √ß√∂k√ºyor, ne yapmalƒ±yƒ±m?',
          answer:
              '√á√∂kme sorunlarƒ± i√ßin:\n\n**ƒ∞lk √ß√∂z√ºmler:**\n‚Ä¢ Uygulamayƒ± tamamen kapat ve yeniden a√ß\n‚Ä¢ Cihazƒ±nƒ± yeniden ba≈ülat\n‚Ä¢ App Store/Play Store\'dan g√ºncelleme kontrol et\n‚Ä¢ Depolama alanƒ±nƒ± kontrol et (en az 1GB bo≈ü olmalƒ±)\n\n**Devam ediyorsa:**\n‚Ä¢ Uygulamayƒ± sil ve yeniden y√ºkle\n‚Ä¢ Hesabƒ±nla tekrar giri≈ü yap\n‚Ä¢ Verilerin otomatik olarak geri gelecek',
        ),
        FAQ(
          question: 'Senkronizasyon √ßalƒ±≈ümƒ±yor',
          answer:
              'Senkronizasyon sorunlarƒ± i√ßin:\n\n‚Ä¢ ƒ∞nternet baƒülantƒ±nƒ± kontrol et\n‚Ä¢ Ayarlar > Hesap > Manuel Senkronizasyon\n‚Ä¢ Diƒüer cihazlarda da g√ºncel s√ºr√ºm olduƒüundan emin ol\n‚Ä¢ √áok fazla veri varsa senkronizasyon birka√ß dakika s√ºrebilir\n\nSorun devam ederse bize bildir, teknik ekibimiz yardƒ±mcƒ± olur.',
        ),
        FAQ(
          question: 'Bildirimler gelmiyor',
          answer:
              'Bildirim ayarlarƒ± kontrol listesi:\n\n**Uygulama i√ßi:**\n‚Ä¢ Ayarlar > Bildirimler > T√ºm se√ßenekleri a√ß\n\n**Cihaz ayarlarƒ±:**\n‚Ä¢ iOS: Ayarlar > Bildirimler > Okuz AI > ƒ∞zin ver\n‚Ä¢ Android: Ayarlar > Uygulamalar > Okuz AI > Bildirimler\n\n**Diƒüer kontroller:**\n‚Ä¢ Rahatsƒ±z etme modu kapalƒ± olmalƒ±\n‚Ä¢ Uygulama g√ºncellemeleri kontrol et',
        ),
        FAQ(
          question: 'Ses √ßalƒ±≈ümƒ±yor',
          answer:
              'Ses sorunlarƒ± i√ßin:\n\n‚Ä¢ Cihaz sesinin a√ßƒ±k olduƒüundan emin ol\n‚Ä¢ Uygulama i√ßi ses ayarlarƒ±nƒ± kontrol et\n‚Ä¢ Bluetooth kulaklƒ±k baƒülƒ±ysa baƒülantƒ±yƒ± kontrol et\n‚Ä¢ Diƒüer uygulamalarda ses √ßalƒ±≈üƒ±yor mu test et\n‚Ä¢ Uygulamayƒ± yeniden ba≈ülat\n\nSorun iOS/Android sistem ayarlarƒ±ndan da kaynaklanabilir.',
        ),
      ],
    ),
    FAQCategory(
      title: 'Genel Kullanƒ±m',
      icon: Icons.help_outline,
      color: const Color(0xFF8B5CF6),
      emoji: 'üí°',
      faqs: [
        FAQ(
          question: '√áevrimdƒ±≈üƒ± kullanƒ±m m√ºmk√ºn m√º?',
          answer:
              '√áevrimdƒ±≈üƒ± √∂zelliklerin:\n\n**Kullanƒ±labilir:**\n‚Ä¢ ƒ∞ndirdiƒüin √ßalƒ±≈üma materyalleri\n‚Ä¢ Pomodoro timer\n‚Ä¢ Temel √ßalƒ±≈üma takibi\n‚Ä¢ √ñnceden y√ºklenmi≈ü sorular\n\n**Kullanƒ±lamaz:**\n‚Ä¢ AI asistan\n‚Ä¢ Canlƒ± senkronizasyon\n‚Ä¢ Yeni i√ßerik indirme\n‚Ä¢ Sosyal √∂zellikler\n\nƒ∞nternet baƒülantƒ±sƒ± geri geldiƒüinde t√ºm veriler otomatik senkronize olur.',
        ),
        FAQ(
          question: 'Veri kullanƒ±mƒ±m ne kadar?',
          answer:
              'Ortalama aylƒ±k veri t√ºketimi:\n\n‚Ä¢ Hafif kullanƒ±m: ~50MB\n‚Ä¢ Orta kullanƒ±m: ~150MB\n‚Ä¢ Yoƒüun kullanƒ±m: ~300MB\n\n**Veri tasarrufu i√ßin:**\n‚Ä¢ WiFi\'da i√ßerik indirin\n‚Ä¢ Ayarlar > Veri Tasarrufu > A√ßƒ±k\n‚Ä¢ Video i√ßerikleri sadece WiFi\'da izle\n‚Ä¢ Otomatik yedeklemeyi WiFi\'ya sƒ±nƒ±rla',
        ),
        FAQ(
          question: 'Ya≈ü sƒ±nƒ±rƒ± var mƒ±?',
          answer:
              'Uygulama kullanƒ±m ko≈üullarƒ±:\n\n‚Ä¢ Minimum ya≈ü: 13\n‚Ä¢ 13-18 ya≈ü arasƒ±: Ebeveyn onayƒ± gerekli\n‚Ä¢ 18+ tam baƒüƒ±msƒ±z kullanƒ±m\n\n**Ebeveyn kontrol√º:**\n‚Ä¢ Kullanƒ±m s√ºresi sƒ±nƒ±rlarƒ±\n‚Ä¢ ƒ∞√ßerik filtreleme\n‚Ä¢ ƒ∞lerleme raporlarƒ±\n‚Ä¢ Harcama limitleri\n\nG√ºvenli √∂ƒürenme ortamƒ± √∂nceliƒüimizdir.',
        ),
        FAQ(
          question: 'Gizliliƒüim nasƒ±l korunuyor?',
          answer:
              'Veri g√ºvenliƒüi √∂nlemlerimiz:\n\n‚Ä¢ T√ºm veriler ≈üifrelenerek saklanƒ±r\n‚Ä¢ Ki≈üisel bilgiler 3. taraflarla payla≈üƒ±lmaz\n‚Ä¢ AI analizleri anonim olarak yapƒ±lƒ±r\n‚Ä¢ ƒ∞stediƒüin zaman verilerini silebilirsin\n‚Ä¢ GDPR ve KVKK uyumlu sistem\n\nDetaylƒ± bilgi i√ßin Gizlilik Politikasƒ±\'nƒ± incele.',
        ),
      ],
    ),
  ];

  @override
  void initState() {
    super.initState();
    _animationController = AnimationController(
      duration: const Duration(milliseconds: 1200),
      vsync: this,
    );
    _fadeAnimation = Tween<double>(
      begin: 0.0,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: _animationController,
      curve: const Interval(0.0, 0.6, curve: Curves.easeOut),
    ));
    _slideAnimation = Tween<double>(
      begin: 20.0,
      end: 0.0,
    ).animate(CurvedAnimation(
      parent: _animationController,
      curve: const Interval(0.2, 1.0, curve: Curves.easeOutCubic),
    ));
    _animationController.forward();
  }

  @override
  void dispose() {
    _animationController.dispose();
    _searchController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final isDark = Theme.of(context).brightness == Brightness.dark;

    return Scaffold(
      body: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
            colors: [
              isDark ? Colors.grey[900]! : Colors.grey[50]!,
              AppTheme.getBackgroundColor(context),
            ],
          ),
        ),
        child: SafeArea(
          child: AnimatedBuilder(
            animation: _animationController,
            builder: (context, child) {
              return FadeTransition(
                opacity: _fadeAnimation,
                child: Transform.translate(
                  offset: Offset(0, _slideAnimation.value),
                  child: CustomScrollView(
                    physics: const BouncingScrollPhysics(),
                    slivers: [
                      _buildSliverAppBar(isDark),
                      SliverToBoxAdapter(
                        child: Padding(
                          padding: const EdgeInsets.all(16),
                          child: Column(
                            children: [
                              _buildHeader(isDark),
                              const SizedBox(height: 24),
                              _buildSearchBar(isDark),
                              const SizedBox(height: 24),
                              _buildQuickActions(isDark),
                              const SizedBox(height: 32),
                              ..._buildFAQSections(isDark),
                              const SizedBox(height: 80),
                            ],
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              );
            },
          ),
        ),
      ),
    );
  }

  Widget _buildSliverAppBar(bool isDark) {
    return SliverAppBar(
      expandedHeight: 120,
      floating: false,
      pinned: true,
      backgroundColor: isDark ? Colors.grey[850] : Colors.white,
      foregroundColor: isDark ? Colors.white : Colors.black87,
      elevation: 0,
      flexibleSpace: FlexibleSpaceBar(
        title: Text(
          'Yardƒ±m & SSS',
          style: TextStyle(
            color: isDark ? Colors.white : Colors.black87,
            fontWeight: FontWeight.w600,
            fontSize: 18,
          ),
        ),
        background: Container(
          decoration: BoxDecoration(
            gradient: LinearGradient(
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
              colors: [
                isDark ? Colors.grey[850]! : Colors.white,
                isDark ? Colors.grey[800]! : Colors.grey[50]!,
              ],
            ),
          ),
          child: Stack(
            children: [
              Positioned(
                top: 40,
                right: 20,
                child: Container(
                  padding: const EdgeInsets.all(12),
                  decoration: BoxDecoration(
                    color: AppTheme.primaryColor.withValues(alpha: 0.1),
                    borderRadius: BorderRadius.circular(20),
                  ),
                  child: Icon(
                    Icons.help_center,
                    color: AppTheme.primaryColor,
                    size: 24,
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildHeader(bool isDark) {
    return Container(
      padding: const EdgeInsets.all(24),
      decoration: BoxDecoration(
        color: AppTheme.getCardColor(context),
        borderRadius: BorderRadius.circular(20),
        border: Border.all(
          color: AppTheme.primaryColor.withValues(alpha: 0.1),
          width: 1,
        ),
        boxShadow: [
          BoxShadow(
            color: isDark
                ? Colors.black.withValues(alpha: 0.3)
                : Colors.grey.withValues(alpha: 0.1),
            blurRadius: 12,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        children: [
          Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              gradient: LinearGradient(
                colors: [AppTheme.primaryColor, AppTheme.accentColor],
              ),
              borderRadius: BorderRadius.circular(20),
            ),
            child: const Icon(
              Icons.support_agent,
              color: Colors.white,
              size: 32,
            ),
          ),
          const SizedBox(height: 16),
          Text(
            'Nasƒ±l Yardƒ±mcƒ± Olabiliriz?',
            style: TextStyle(
              color: AppTheme.getPrimaryTextColor(context),
              fontSize: 20,
              fontWeight: FontWeight.bold,
            ),
          ),
          const SizedBox(height: 8),
          Text(
            'En sƒ±k sorulan sorularƒ±n cevaplarƒ±nƒ± bul veya doƒürudan bizimle ileti≈üime ge√ß',
            textAlign: TextAlign.center,
            style: TextStyle(
              color: AppTheme.getSecondaryTextColor(context),
              fontSize: 14,
              height: 1.4,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildSearchBar(bool isDark) {
    return Container(
      decoration: BoxDecoration(
        color: AppTheme.getCardColor(context),
        borderRadius: BorderRadius.circular(16),
        border: Border.all(
          color: AppTheme.primaryColor.withValues(alpha: 0.2),
          width: 1,
        ),
        boxShadow: [
          BoxShadow(
            color: isDark
                ? Colors.black.withValues(alpha: 0.3)
                : Colors.grey.withValues(alpha: 0.1),
            blurRadius: 8,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: TextField(
        controller: _searchController,
        onChanged: (value) {
          setState(() {
            _searchQuery = value.toLowerCase();
          });
        },
        style: TextStyle(
          color: AppTheme.getPrimaryTextColor(context),
        ),
        decoration: InputDecoration(
          hintText: 'Sorunu ara... (√∂rn: XP, abonelik, √ß√∂kme)',
          hintStyle: TextStyle(
            color: AppTheme.getSecondaryTextColor(context),
          ),
          prefixIcon: Icon(
            Icons.search,
            color: AppTheme.primaryColor,
          ),
          suffixIcon: _searchQuery.isNotEmpty
              ? IconButton(
                  icon: Icon(
                    Icons.clear,
                    color: AppTheme.getSecondaryTextColor(context),
                  ),
                  onPressed: () {
                    _searchController.clear();
                    setState(() {
                      _searchQuery = '';
                    });
                  },
                )
              : null,
          border: InputBorder.none,
          contentPadding: const EdgeInsets.all(16),
        ),
      ),
    );
  }

  Widget _buildQuickActions(bool isDark) {
    return Row(
      children: [
        Expanded(
          child: _buildQuickActionCard(
            title: 'Bize Ula≈üƒ±n',
            subtitle: 'Doƒürudan destek',
            icon: Icons.email,
            color: AppTheme.primaryColor,
            onTap: _contactSupport,
            isDark: isDark,
          ),
        ),
        const SizedBox(width: 12),
        Expanded(
          child: _buildQuickActionCard(
            title: 'Canlƒ± Sohbet',
            subtitle: 'Hƒ±zlƒ± yardƒ±m',
            icon: Icons.chat,
            color: AppTheme.successColor,
            onTap: _openLiveChat,
            isDark: isDark,
          ),
        ),
      ],
    );
  }

  Widget _buildQuickActionCard({
    required String title,
    required String subtitle,
    required IconData icon,
    required Color color,
    required VoidCallback onTap,
    required bool isDark,
  }) {
    return GestureDetector(
      onTap: onTap,
      child: Container(
        padding: const EdgeInsets.all(16),
        decoration: BoxDecoration(
          color: AppTheme.getCardColor(context),
          borderRadius: BorderRadius.circular(16),
          border: Border.all(
            color: color.withValues(alpha: 0.2),
            width: 1,
          ),
          boxShadow: [
            BoxShadow(
              color: isDark
                  ? Colors.black.withValues(alpha: 0.3)
                  : Colors.grey.withValues(alpha: 0.1),
              blurRadius: 8,
              offset: const Offset(0, 2),
            ),
          ],
        ),
        child: Column(
          children: [
            Container(
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: color.withValues(alpha: 0.1),
                borderRadius: BorderRadius.circular(12),
              ),
              child: Icon(
                icon,
                color: color,
                size: 24,
              ),
            ),
            const SizedBox(height: 12),
            Text(
              title,
              style: TextStyle(
                color: AppTheme.getPrimaryTextColor(context),
                fontSize: 14,
                fontWeight: FontWeight.w600,
              ),
            ),
            const SizedBox(height: 4),
            Text(
              subtitle,
              style: TextStyle(
                color: AppTheme.getSecondaryTextColor(context),
                fontSize: 12,
              ),
            ),
          ],
        ),
      ),
    );
  }

  List<Widget> _buildFAQSections(bool isDark) {
    final filteredCategories = _searchQuery.isEmpty
        ? _faqCategories
        : _faqCategories
            .map((category) {
              final filteredFaqs = category.faqs
                  .where((faq) =>
                      faq.question.toLowerCase().contains(_searchQuery) ||
                      faq.answer.toLowerCase().contains(_searchQuery))
                  .toList();

              return filteredFaqs.isEmpty
                  ? null
                  : FAQCategory(
                      title: category.title,
                      icon: category.icon,
                      color: category.color,
                      emoji: category.emoji,
                      faqs: filteredFaqs,
                    );
            })
            .whereType<FAQCategory>()
            .toList();

    if (filteredCategories.isEmpty && _searchQuery.isNotEmpty) {
      return [
        Container(
          padding: const EdgeInsets.all(24),
          decoration: BoxDecoration(
            color: AppTheme.getCardColor(context),
            borderRadius: BorderRadius.circular(16),
          ),
          child: Column(
            children: [
              Icon(
                Icons.search_off,
                color: AppTheme.getSecondaryTextColor(context),
                size: 48,
              ),
              const SizedBox(height: 16),
              Text(
                'Aradƒ±ƒüƒ±nƒ±z bulunamadƒ±',
                style: TextStyle(
                  color: AppTheme.getPrimaryTextColor(context),
                  fontSize: 18,
                  fontWeight: FontWeight.w600,
                ),
              ),
              const SizedBox(height: 8),
              Text(
                'Farklƒ± anahtar kelimeler deneyin veya doƒürudan bizimle ileti≈üime ge√ßin',
                textAlign: TextAlign.center,
                style: TextStyle(
                  color: AppTheme.getSecondaryTextColor(context),
                  fontSize: 14,
                ),
              ),
              const SizedBox(height: 16),
              ElevatedButton(
                onPressed: _contactSupport,
                style: ElevatedButton.styleFrom(
                  backgroundColor: AppTheme.primaryColor,
                ),
                child: const Text('Bize Ula≈üƒ±n'),
              ),
            ],
          ),
        ),
      ];
    }

    return filteredCategories
        .map((category) => _buildFAQCategory(category, isDark))
        .toList();
  }

  Widget _buildFAQCategory(FAQCategory category, bool isDark) {
    return Container(
      margin: const EdgeInsets.only(bottom: 24),
      decoration: BoxDecoration(
        color: AppTheme.getCardColor(context),
        borderRadius: BorderRadius.circular(16),
        border: Border.all(
          color: category.color.withValues(alpha: 0.2),
          width: 1,
        ),
        boxShadow: [
          BoxShadow(
            color: isDark
                ? Colors.black.withValues(alpha: 0.3)
                : Colors.grey.withValues(alpha: 0.1),
            blurRadius: 8,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        children: [
          Container(
            padding: const EdgeInsets.all(20),
            decoration: BoxDecoration(
              color: category.color.withValues(alpha: 0.05),
              borderRadius:
                  const BorderRadius.vertical(top: Radius.circular(16)),
            ),
            child: Row(
              children: [
                Container(
                  padding: const EdgeInsets.all(12),
                  decoration: BoxDecoration(
                    color: category.color.withValues(alpha: 0.1),
                    borderRadius: BorderRadius.circular(12),
                  ),
                  child: Row(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      Text(category.emoji,
                          style: const TextStyle(fontSize: 20)),
                      const SizedBox(width: 8),
                      Icon(
                        category.icon,
                        color: category.color,
                        size: 20,
                      ),
                    ],
                  ),
                ),
                const SizedBox(width: 16),
                Expanded(
                  child: Text(
                    category.title,
                    style: TextStyle(
                      color: AppTheme.getPrimaryTextColor(context),
                      fontSize: 18,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ),
                Container(
                  padding:
                      const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                  decoration: BoxDecoration(
                    color: category.color.withValues(alpha: 0.1),
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: Text(
                    '${category.faqs.length}',
                    style: TextStyle(
                      color: category.color,
                      fontSize: 12,
                      fontWeight: FontWeight.w600,
                    ),
                  ),
                ),
              ],
            ),
          ),
          ListView.separated(
            shrinkWrap: true,
            physics: const NeverScrollableScrollPhysics(),
            itemCount: category.faqs.length,
            separatorBuilder: (context, index) => Divider(
              height: 1,
              indent: 20,
              endIndent: 20,
              color: category.color.withValues(alpha: 0.1),
            ),
            itemBuilder: (context, index) {
              final faq = category.faqs[index];
              final globalIndex =
                  _faqCategories.expand((c) => c.faqs).toList().indexOf(faq);
              final isExpanded = _expandedIndex == globalIndex;

              return _buildFAQItem(
                  faq, globalIndex, isExpanded, category.color, isDark);
            },
          ),
        ],
      ),
    );
  }

  Widget _buildFAQItem(
      FAQ faq, int index, bool isExpanded, Color categoryColor, bool isDark) {
    return Theme(
      data: Theme.of(context).copyWith(dividerColor: Colors.transparent),
      child: ExpansionTile(
        key: Key('faq_$index'),
        tilePadding: const EdgeInsets.symmetric(horizontal: 20, vertical: 8),
        childrenPadding: const EdgeInsets.fromLTRB(20, 0, 20, 16),
        onExpansionChanged: (expanded) {
          setState(() {
            _expandedIndex = expanded ? index : null;
          });
        },
        leading: Container(
          width: 40,
          height: 40,
          decoration: BoxDecoration(
            color: isExpanded
                ? categoryColor.withValues(alpha: 0.1)
                : Colors.grey.withValues(alpha: 0.1),
            borderRadius: BorderRadius.circular(20),
          ),
          child: Icon(
            isExpanded ? Icons.remove : Icons.add,
            color: isExpanded
                ? categoryColor
                : AppTheme.getSecondaryTextColor(context),
            size: 20,
          ),
        ),
        title: Text(
          faq.question,
          style: TextStyle(
            color: AppTheme.getPrimaryTextColor(context),
            fontSize: 15,
            fontWeight: FontWeight.w600,
          ),
        ),
        trailing: Icon(
          isExpanded ? Icons.keyboard_arrow_up : Icons.keyboard_arrow_down,
          color: AppTheme.getSecondaryTextColor(context),
        ),
        children: [
          Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: categoryColor.withValues(alpha: 0.05),
              borderRadius: BorderRadius.circular(12),
            ),
            child: Text(
              faq.answer,
              style: TextStyle(
                color: AppTheme.getSecondaryTextColor(context),
                fontSize: 14,
                height: 1.5,
              ),
            ),
          ),
        ],
      ),
    );
  }

  void _contactSupport() async {
    final Uri emailUri = Uri(
      scheme: 'mailto',
      path: 'destek@okuzai.com',
      query: Uri.encodeQueryComponent(
          'subject=Okuz AI Destek Talebi&body=Merhaba,\n\nSorunum:\n\n\nCihaz Bilgileri:\n- Platform: ${Theme.of(context).platform}\n- Uygulama S√ºr√ºm√º: 1.0.0\n\nTe≈üekk√ºrler'),
    );

    try {
      if (await canLaunchUrl(emailUri)) {
        await launchUrl(emailUri);
      } else {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: const Text(
                  'E-posta uygulamasƒ± a√ßƒ±lamadƒ±. L√ºtfen destek@okuzai.com adresine yazƒ±n.'),
              backgroundColor: AppTheme.errorColor,
              action: SnackBarAction(
                label: 'Kopyala',
                textColor: Colors.white,
                onPressed: () {
                  // Clipboard'a kopyala
                },
              ),
            ),
          );
        }
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: const Text(
                'Bir hata olu≈ütu. L√ºtfen manuel olarak destek@okuzai.com adresine yazƒ±n.'),
            backgroundColor: AppTheme.errorColor,
          ),
        );
      }
    }
  }

  void _openLiveChat() {
    // Canlƒ± sohbet entegrasyonu (Intercom, Zendesk, vs.)
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Row(
          children: [
            Icon(Icons.chat_bubble, color: AppTheme.successColor),
            const SizedBox(width: 8),
            const Text('Canlƒ± Sohbet'),
          ],
        ),
        content: const Text(
          'Canlƒ± sohbet √∂zelliƒüi yakƒ±nda kullanƒ±ma sunulacak. '
          '≈ûimdilik e-posta ile bizimle ileti≈üime ge√ßebilirsiniz.',
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Tamam'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context);
              _contactSupport();
            },
            child: const Text('E-posta G√∂nder'),
          ),
        ],
      ),
    );
  }
}

// Veri modelleri
class FAQCategory {
  final String title;
  final IconData icon;
  final Color color;
  final String emoji;
  final List<FAQ> faqs;

  FAQCategory({
    required this.title,
    required this.icon,
    required this.color,
    required this.emoji,
    required this.faqs,
  });
}

class FAQ {
  final String question;
  final String answer;

  FAQ({
    required this.question,
    required this.answer,
  });
}
