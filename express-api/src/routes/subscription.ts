import { Router, Request, Response } from 'express';
import { authenticateToken } from '../utils/auth';
import { asyncHandler } from '../utils/errorHandler';
import { HttpError } from '../utils/errorHandler';
import { db } from '../utils/firebase';
import { logger } from '../utils/logger';
import { AuthenticatedRequest, ApiResponse, SubscriptionData } from '../types';
import * as admin from 'firebase-admin';

const router = Router();

/**
 * POST /api/v1/subscription/startUserTrial
 * KullanÄ±cÄ±nÄ±n trial durumunu baÅŸlatÄ±r (onboarding tamamlandÄ±ÄŸÄ±nda)
 */
router.post('/startUserTrial', authenticateToken, asyncHandler(async (req: AuthenticatedRequest, res: Response) => {
  const userId = req.user!.uid;

  try {
    logger.info(`ðŸŽ¯ Trial baÅŸlatÄ±lÄ±yor - User: ${userId}`);

    const userRef = db.doc(`users/${userId}`);
    const now = admin.firestore.Timestamp.now();
    const trialEndDate = new Date(now.toDate().getTime() + (7 * 24 * 60 * 60 * 1000)); // 7 gÃ¼n sonra

    const subscriptionData: SubscriptionData = {
      subscriptionTier: 'free',
      trialStartDate: now,
      trialEndDate: admin.firestore.Timestamp.fromDate(trialEndDate),
      isTrialActive: true,
      autoRenew: false
    };

    await userRef.set({
      subscription: subscriptionData,
      isPremium: false
    }, { merge: true });

    logger.info(`âœ… Trial baÅŸlatÄ±ldÄ± - User: ${userId}, BitiÅŸ: ${trialEndDate.toISOString()}`);

    const response: ApiResponse = {
      success: true,
      data: {
        message: 'Trial baÅŸlatÄ±ldÄ±',
        trialEndDate: trialEndDate.toISOString(),
        daysRemaining: 7
      },
      timestamp: new Date().toISOString()
    };

    res.status(200).json(response);
  } catch (error: any) {
    logger.error('Trial baÅŸlatma hatasÄ±:', error);
    throw new HttpError(`Trial baÅŸlatÄ±lamadÄ±: ${error.message}`, 500);
  }
}));

/**
 * POST /api/v1/subscription/checkSubscriptionStatus
 * KullanÄ±cÄ±nÄ±n subscription durumunu kontrol eder
 */
router.post('/checkSubscriptionStatus', authenticateToken, asyncHandler(async (req: AuthenticatedRequest, res: Response) => {
  const userId = req.user!.uid;

  try {
    logger.info(`ðŸ“Š Subscription durumu kontrol ediliyor - User: ${userId}`);

    const userRef = db.doc(`users/${userId}`);
    const userSnap = await userRef.get();

    if (!userSnap.exists) {
      throw new HttpError('KullanÄ±cÄ± bulunamadÄ±', 404);
    }

    const userData = userSnap.data();
    const subscription = userData?.subscription as SubscriptionData | undefined;
    const now = admin.firestore.Timestamp.now();

    if (!subscription) {
      const response: ApiResponse = {
        success: true,
        data: {
          hasSubscription: false,
          isTrialActive: false,
          isPremium: false,
          subscriptionTier: 'free',
          canAccessPremiumFeatures: false
        },
        timestamp: new Date().toISOString()
      };
      return res.status(200).json(response);
    }

    // Trial durumunu kontrol et
    let isTrialActive = false;
    let daysRemaining = 0;
    if (subscription.trialStartDate && subscription.trialEndDate) {
      isTrialActive = now.toDate() < subscription.trialEndDate.toDate();
      if (isTrialActive) {
        const msRemaining = subscription.trialEndDate.toDate().getTime() - now.toDate().getTime();
        daysRemaining = Math.ceil(msRemaining / (24 * 60 * 60 * 1000));
      }
    }

    // Premium durumunu kontrol et
    const isPremium = subscription.subscriptionTier !== 'free' || isTrialActive;
    const canAccessPremiumFeatures = isPremium;

    // Trial sÃ¼resi dolmuÅŸsa gÃ¼ncelle
    if (subscription.isTrialActive && !isTrialActive) {
      await userRef.update({
        'subscription.isTrialActive': false,
        'isPremium': subscription.subscriptionTier !== 'free'
      });
    }

    logger.info(`âœ… Subscription durumu kontrol edildi - User: ${userId}, Premium: ${isPremium}`);

    const response: ApiResponse = {
      success: true,
      data: {
        hasSubscription: true,
        isTrialActive,
        isPremium,
        subscriptionTier: subscription.subscriptionTier,
        canAccessPremiumFeatures,
        daysRemaining: isTrialActive ? daysRemaining : 0,
        autoRenew: subscription.autoRenew || false
      },
      timestamp: new Date().toISOString()
    };

    res.status(200).json(response);
  } catch (error: any) {
    logger.error('Subscription kontrol hatasÄ±:', error);
    throw new HttpError(`Subscription durumu kontrol edilemedi: ${error.message}`, 500);
  }
}));

/**
 * POST /api/v1/subscription/upgradeToPremium
 * KullanÄ±cÄ±yÄ± premium'a yÃ¼kseltir
 */
router.post('/upgradeToPremium', authenticateToken, asyncHandler(async (req: AuthenticatedRequest, res: Response) => {
  const userId = req.user!.uid;
  const { planType = 'monthly', paymentMethod } = req.body;

  if (!paymentMethod) {
    throw new HttpError('Payment method gereklidir', 400);
  }

  try {
    logger.info(`ðŸ’³ Premium upgrade baÅŸlatÄ±lÄ±yor - User: ${userId}, Plan: ${planType}`);

    const userRef = db.doc(`users/${userId}`);
    const now = admin.firestore.Timestamp.now();
    
    // Plan sÃ¼resini belirle
    const planDurationMs = planType === 'yearly' ? 365 * 24 * 60 * 60 * 1000 : 30 * 24 * 60 * 60 * 1000;
    const expiryDate = new Date(now.toDate().getTime() + planDurationMs);

    const subscriptionData: SubscriptionData = {
      subscriptionTier: 'premium',
      isTrialActive: false,
      autoRenew: true,
      purchaseDate: now,
      expiryDate: admin.firestore.Timestamp.fromDate(expiryDate)
    };

    await userRef.set({
      subscription: subscriptionData,
      isPremium: true,
      lastUpgrade: now
    }, { merge: true });

    // Upgrade event'ini logla
    await db.collection(`users/${userId}/subscription_events`).add({
      eventType: 'upgrade',
      fromTier: 'free',
      toTier: 'premium',
      planType,
      paymentMethod,
      timestamp: now,
      expiryDate: admin.firestore.Timestamp.fromDate(expiryDate)
    });

    logger.info(`âœ… Premium upgrade tamamlandÄ± - User: ${userId}, BitiÅŸ: ${expiryDate.toISOString()}`);

    const response: ApiResponse = {
      success: true,
      data: {
        message: 'Premium abonelik baÅŸarÄ±yla aktivleÅŸtirildi!',
        subscriptionTier: 'premium',
        expiryDate: expiryDate.toISOString(),
        planType,
        isPremium: true
      },
      timestamp: new Date().toISOString()
    };

    res.status(200).json(response);
  } catch (error: any) {
    logger.error('Premium upgrade hatasÄ±:', error);
    throw new HttpError(`Premium upgrade baÅŸarÄ±sÄ±z: ${error.message}`, 500);
  }
}));

/**
 * POST /api/v1/subscription/joinFounderMembership
 * KullanÄ±cÄ±yÄ± founder membership'e dahil eder
 */
router.post('/joinFounderMembership', authenticateToken, asyncHandler(async (req: AuthenticatedRequest, res: Response) => {
  const userId = req.user!.uid;
  const { inviteCode } = req.body;

  // Basit invite code kontrolÃ¼ (gerÃ§ek uygulamada daha karmaÅŸÄ±k olabilir)
  const validInviteCodes = ['FOUNDER2024', 'OKUZ_FOUNDER', 'EARLY_ACCESS'];
  
  if (!inviteCode || !validInviteCodes.includes(inviteCode)) {
    throw new HttpError('GeÃ§ersiz davet kodu', 400);
  }

  try {
    logger.info(`ðŸ‘‘ Founder membership baÅŸlatÄ±lÄ±yor - User: ${userId}, Code: ${inviteCode}`);

    const userRef = db.doc(`users/${userId}`);
    const now = admin.firestore.Timestamp.now();
    
    // Founder membership sÃ¼resi (lifetime)
    const expiryDate = new Date('2030-12-31'); // 2030'a kadar geÃ§erli

    const subscriptionData: SubscriptionData = {
      subscriptionTier: 'founder',
      isTrialActive: false,
      autoRenew: false,
      purchaseDate: now,
      expiryDate: admin.firestore.Timestamp.fromDate(expiryDate)
    };

    await userRef.set({
      subscription: subscriptionData,
      isPremium: true,
      isFounder: true,
      founderJoinDate: now,
      founderInviteCode: inviteCode
    }, { merge: true });

    // Founder event'ini logla
    await db.collection(`users/${userId}/subscription_events`).add({
      eventType: 'founder_join',
      toTier: 'founder',
      inviteCode,
      timestamp: now,
      isLifetime: true
    });

    logger.info(`âœ… Founder membership tamamlandÄ± - User: ${userId}`);

    const response: ApiResponse = {
      success: true,
      data: {
        message: 'Founder membership baÅŸarÄ±yla aktivleÅŸtirildi! ðŸŽ‰',
        subscriptionTier: 'founder',
        isLifetime: true,
        isPremium: true,
        isFounder: true,
        specialBenefits: [
          'Lifetime premium access',
          'Priority support',
          'Founder badge',
          'Early access to new features'
        ]
      },
      timestamp: new Date().toISOString()
    };

    res.status(200).json(response);
  } catch (error: any) {
    logger.error('Founder membership hatasÄ±:', error);
    throw new HttpError(`Founder membership baÅŸarÄ±sÄ±z: ${error.message}`, 500);
  }
}));

export default router; 